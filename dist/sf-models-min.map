{"version":3,"sources":["sf-models-min-orig.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","window","SFModels","./sf-models","2","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_salesforceSchemaReader","_salesforceSchemaReader2","SF","Ember","undefined","DS","sforce","SchemaReader","_sfRelExt","_sfNameExt","_emRelExt","_emNameExt","endsWith","str","ending","indexOf","hasCustomSfRelationExtension","name","hasCustomSfNameExtension","hasCustomEmberRelationExtension","hasCustomEmberNameExtension","emberiseName","sfName","substring","this","String","dasherize","sfriseName","emName","camelize","emberiseRefs","refs","Array","isArray","emberRefs","push","sfriseRefs","sfRefs","sforceToEmberTypeMap","id","boolean","string","datetime","currency","date","email","int","double","percent","location","phone","picklist","multipicklist","textarea","url","address","calculated","combobox","datacategorygroupreference","encryptedstring","junctionidlist","masterrecord","createModelsForSObjects","emberApp","sObjectMetaMap","sObjectReader","typeFilter","modelExtensionMap","createEmberModelDefinitions","createModelsFromExtensionMap","evaluatedMap","sObjectName","model","evaluatedModel","key","eval","eon","Model","extend","cache","factory","Cache","recordInverses","modelExtension","createFieldModelForSObject","createRelationshipModelForSObject","relVisitor","rel","object","path","reader","relationshipName","childSObject","isReferencedByMultitypedReference","completeMetas","logInverses","field","shallowReadMetaChildRelationshipsAbr","fieldVisitor","fn","updateable","logNonUpdateableField","type","referenceTo","erefs","custom","inverse","getInverse","logMultitypedReferenceField","console","log","shallowReadMetaFieldsAbr","rn","econ","createSoqlSelect","whereClause","childSelectCreator","q","eachAttribute","meta","eachRelationship","descriptor","kind","createRootSoqlSelect","createIdSoqlSelect","toSoqlArray","array","soqlAry","formatPayload","pl","formattedPl","plural","Inflector","inflector","pluralize","modelName","records","formatRecord","size","rec","fieldName","formatToIdArray","Id","idArr","sfFormatSnapshot","snapshot","_this","so","SObject","metaOptions","metaForProperty","options","serialisePrimitive","attr","belongsTo","primitive","Date","toISOString","query","store","_query","cbSuccess","cbErr","connection","createEmberModels","opts","cb","objNames","owner","w","nonUpdateableFields","multitypedReferenceFields","inversFields","that","objectName","toLowerCase","isUpdateableField","isMultitypedReferenceField","relationship","getInversMap","map","field1Name","field2Name","salesforce-schema-reader","3","clone","copy","constructor","hasOwnProperty","batchSize","onSuccess","onFailure","isFetching","skipErrors","readRelWithUdefNames","populate","prototype","preMetas","nameBatches","threadCount","res","describeGlobal","getArray","batch","j","failed","handledFailure","err","fail","fetchCompleteMeta","objs","success","fetchSuccess","metas","registerMeta","describeSObjects","shallowReadFields","visitor","validateState","objName","shallowReadMetaFields","visited","fields","subPath","concat","deepReadFields","deepReadMetaFieldsAbr","deepReadMetaFields","shallowReadChildRelationships","shallowReadMetaChildRelationships","childRelationships","deepReadChildRelationships","deepReadMetaChildRelationshipsAbr","deepReadMetaChildRelationships","createFilterVisitor","filter","newObjectNameFilter","caseSensitive","newFieldNameFilter","newFieldAndObjectNameFilter","concatPath","4","./dist/schema-reader-node.js"],"mappings":"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","file":"sf-models-min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\n\nwindow.SFModels = require(\"./sf-models\");\n},{\"./sf-models\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _salesforceSchemaReader = require('salesforce-schema-reader');\n\nvar _salesforceSchemaReader2 = _interopRequireDefault(_salesforceSchemaReader);\n\nvar SF;\nvar SFModels = SF = {\n\tEmber: window && window.Ember ? window.Ember : undefined,\n\tDS: undefined,\n\tsforce: window && window.sforce ? window.sforce : undefined,\n\tSchemaReader: _salesforceSchemaReader2['default'],\n\t// Constants and methods for salesforce custom entity ending handling and conversions\n\t_sfRelExt: '__r',\n\t_sfNameExt: '__c',\n\t_emRelExt: 'rrr',\n\t_emNameExt: 'ccc',\n\tendsWith: function endsWith(str, ending) {\n\t\treturn str.indexOf(ending, str.length - ending.length) > -1;\n\t},\n\thasCustomSfRelationExtension: function hasCustomSfRelationExtension(name) {\n\t\treturn SF.endsWith(name, SF._sfRelExt);\n\t},\n\thasCustomSfNameExtension: function hasCustomSfNameExtension(name) {\n\t\treturn SF.endsWith(name, SF._sfNameExt);\n\t},\n\thasCustomEmberRelationExtension: function hasCustomEmberRelationExtension(name) {\n\t\treturn SF.endsWith(name, SF._emRelExt);\n\t},\n\thasCustomEmberNameExtension: function hasCustomEmberNameExtension(name) {\n\t\treturn SF.endsWith(name, SF._emNameExt);\n\t},\n\temberiseName: function emberiseName(sfName) {\n\t\tif (SF.hasCustomSfNameExtension(sfName)) sfName = sfName.substring(0, sfName.length - SF._sfNameExt.length) + SF._emNameExt;else if (SF.hasCustomSfRelationExtension(sfName)) sfName = sfName.substring(0, sfName.length - SF._sfRelExt.length) + SF._emRelExt;\n\t\treturn this.Ember.String.dasherize(sfName);\n\t},\n\tsfriseName: function sfriseName(emName) {\n\t\temName = this.Ember.String.camelize(emName);\n\t\tif (SF.hasCustomEmberNameExtension(emName)) return emName.substring(0, emName.length - SF._emNameExt.length) + SF._sfNameExt;else if (SF.hasCustomEmberRelationExtension(emName)) return emName.substring(0, emName.length - SF._emRelExt.length) + SF._sfRelExt;\n\t\treturn emName;\n\t},\n\temberiseRefs: function emberiseRefs(refs) {\n\t\tif (typeof refs === 'string') return SF.emberiseName(refs);else if (Array.isArray(refs)) {\n\t\t\tvar emberRefs = [];\n\t\t\tfor (var i = 0; i < refs.length; i++) emberRefs.push(SF.emberiseName(refs[i]));\n\t\t\treturn emberRefs;\n\t\t} else return null;\n\t},\n\tsfriseRefs: function sfriseRefs(refs) {\n\t\tif (typeof refs === 'string') return SF.sfriseName(refs);else if (Array.isArray(refs)) {\n\t\t\tvar sfRefs = [];\n\t\t\tfor (var i = 0; i < refs.length; i++) sfRefs.push(SF.sfriseName(refs[i]));\n\t\t\treturn sfRefs;\n\t\t} else return null;\n\t},\n\t// A type map to convert javascript datatypes used by salesforce to datatypes used in ember\n\t// see : https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/field_types.htm\n\tsforceToEmberTypeMap: {\n\t\tid: 'string',\n\t\tboolean: 'boolean',\n\t\tstring: 'string',\n\t\tdatetime: 'date',\n\t\tcurrency: 'number',\n\t\tdate: 'date',\n\t\temail: 'string',\n\t\tint: 'number',\n\t\tdouble: 'number',\n\t\tpercent: 'number',\n\t\tlocation: 'string',\n\t\tphone: 'string',\n\t\tpicklist: 'string',\n\t\tmultipicklist: 'string',\n\t\ttextarea: 'string',\n\t\turl: 'string',\n\t\taddress: 'string',\n\t\tcalculated: 'string',\n\t\tcombobox: 'string',\n\t\tdatacategorygroupreference: 'string',\n\t\tencryptedstring: 'string',\n\t\tjunctionidlist: 'string',\n\t\tmasterrecord: 'string'\n\t},\n\t// One of the main methods. Used to read the salesforce schema using the sObjectReader and create\n\t// matching ember models. Pass in a typeFilter function to limit the models created.\n\t// For example if you only want to create a model for a salesforce Account sobject:\n\t//\n\t// typeFilter = function(obj) { return obj.name === 'Account'; }. If the typeFilter isn't used\n\t// all the salesforce object definitions are converted into ember models.\n\tcreateModelsForSObjects: function createModelsForSObjects(emberApp, sObjectMetaMap, sObjectReader, typeFilter) {\n\t\tvar modelExtensionMap = SF.createEmberModelDefinitions(sObjectMetaMap, sObjectReader, typeFilter);\n\t\tSF.createModelsFromExtensionMap(emberApp, modelExtensionMap);\n\t},\n\t// One of the main methods. Used to create the ember models from ember model definitions in a js object.\n\t// Use createEmberModelDefinitions to create the ember model definitions.\n\tcreateModelsFromExtensionMap: function createModelsFromExtensionMap(emberApp, modelExtensionMap) {\n\t\tvar evaluatedMap = {};\n\t\tfor (var sObjectName in modelExtensionMap) {\n\t\t\tvar model = modelExtensionMap[sObjectName];\n\t\t\tvar evaluatedModel = {};\n\t\t\tfor (var key in model) {\n\t\t\t\tif (typeof model[key] === 'string') evaluatedModel[key] = eval(model[key]);else evaluatedModel[key] = model[key];\n\t\t\t}\n\t\t\tvar eon = SF.emberiseName(sObjectName);\n\t\t\teon = this.Ember.String.dasherize(eon);\n\t\t\temberApp[eon] = this.DS.Model.extend(evaluatedModel);\n\t\t}\n\t},\n\t// One of the main methods. Used to read the salesforce schema using the sObjectReader and create\n\t// matching ember model definitions into a js object. See createModelsForSObjects method for the typeFilter\n\t// definition. If the typeFilter isn't used all the salesforce object definitions are converted into ember\n\t// models.\n\t//\n\t// Use this method to create a static definition of the objects you use in your app so that you don't have\n\t// to dynamically recreate it every time, which is slow, requires the use of a callback and prevents\n\t// proper route handling when you land on the page/initialise the app.\n\tcreateEmberModelDefinitions: function createEmberModelDefinitions(sObjectMetaMap, sObjectReader, typeFilter) {\n\t\tvar modelExtensionMap = {};\n\t\tvar cache = new SF.factory.Cache();\n\n\t\tfor (var sObjectName in sObjectMetaMap) {\n\t\t\tif (typeFilter && !typeFilter(sObjectMetaMap[sObjectName])) continue;\n\t\t\tSF.recordInverses(sObjectName, sObjectReader, cache, typeFilter);\n\t\t}\n\n\t\tfor (var sObjectName in sObjectMetaMap) {\n\t\t\tif (typeFilter && !typeFilter(sObjectMetaMap[sObjectName])) continue;\n\t\t\tvar modelExtension = {};\n\t\t\tmodelExtensionMap[sObjectName] = modelExtension;\n\t\t\tSF.createFieldModelForSObject(modelExtension, sObjectName, sObjectReader, cache, typeFilter);\n\t\t}\n\n\t\tfor (var sObjectName in sObjectMetaMap) {\n\t\t\tif (typeFilter && !typeFilter(sObjectMetaMap[sObjectName])) continue;\n\t\t\tvar modelExtension = modelExtensionMap[sObjectName];\n\t\t\tSF.createRelationshipModelForSObject(modelExtension, sObjectName, sObjectReader, cache, typeFilter);\n\t\t}\n\t\treturn modelExtensionMap;\n\t},\n\t// The first stage of creating the ember model definitions. The model definition creation needs to be divided\n\t// into three phases due so that the relationships between objects can be properly defined.\n\t// I.e. first the inverses between relationships then the field definitions and then the relationship definitions\n\t// which need the field definitions.\n\t//\n\t// See createModelsForSObjects method for the typeFilter definition. If the typeFilter isn't used all the\n\t// salesforce object definitions are converted into ember models.\n\trecordInverses: function recordInverses(sObjectName, sObjectReader, cache, typeFilter) {\n\t\tvar relVisitor = function relVisitor(rel, object, path, reader) {\n\t\t\tif (typeof rel.relationshipName === 'undefined' || typeof rel.childSObject === 'undefined' || cache.isReferencedByMultitypedReference(rel)) return;\n\t\t\tif (typeFilter && !typeFilter(sObjectReader.completeMetas[rel.childSObject])) return;\n\t\t\tcache.logInverses(sObjectName, rel.relationshipName, rel.field);\n\t\t};\n\n\t\tvar obj = sObjectReader.completeMetas[sObjectName];\n\t\tsObjectReader.shallowReadMetaChildRelationshipsAbr(obj, relVisitor);\n\t},\n\t// The second stage of creating the ember model definitions. The model definition creation needs to be divided\n\t// into three phases due so that the relationships between objects can be properly defined.\n\t// I.e. first the inverses between relationships then the field definitions and then the relationship definitions\n\t// which need the field definitions.\n\t//\n\t// See createModelsForSObjects method for the typeFilter definition. If the typeFilter isn't used all the\n\t// salesforce object definitions are converted into ember models.\n\tcreateFieldModelForSObject: function createFieldModelForSObject(modelExtension, sObjectName, sObjectReader, cache, typeFilter) {\n\t\tvar fieldVisitor = function fieldVisitor(field, object, path, reader) {\n\t\t\tvar fn = field.name;\n\t\t\tvar updateable = field.updateable === 'true';\n\t\t\tif (!updateable) cache.logNonUpdateableField(sObjectName, fn);\n\t\t\tif (field.type === 'reference') {\n\t\t\t\tif (typeof field.referenceTo === 'string') {\n\t\t\t\t\tvar erefs = field.referenceTo;\n\t\t\t\t\tif (typeFilter && !typeFilter(sObjectReader.completeMetas[erefs])) {\n\t\t\t\t\t\tmodelExtension[fn] = \"this.DS.attr('string', {updateable : \" + updateable + \"})\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (field.custom == 'true') erefs = SF.emberiseName(erefs);\n\t\t\t\t\tvar inverse = cache.getInverse(sObjectName, fn);\n\t\t\t\t\tif (inverse != null) modelExtension[fn] = \"this.DS.belongsTo('\" + erefs + \"', { async : true, updateable : \" + updateable + \", inverse : '\" + inverse + \"' })\";else modelExtension[fn] = \"this.DS.belongsTo('\" + erefs + \"', { async : true, updateable : \" + updateable + \", inverse : null })\";\n\t\t\t\t} else if (Array.isArray(field.referenceTo)) {\n\t\t\t\t\tcache.logMultitypedReferenceField(sObjectName, fn);\n\t\t\t\t\tmodelExtension[fn] = \"this.DS.attr('string', { multiRef : true, updateable : \" + updateable + \" })\";\n\t\t\t\t} else {\n\t\t\t\t\t//cache.logMultitypedReferenceField(sObjectName, fn)\n\t\t\t\t\tmodelExtension[fn] = \"this.DS.attr('string', {updateable : \" + updateable + \"})\";\n\t\t\t\t}\n\t\t\t} else if (fn !== 'Id') modelExtension[fn] = \"this.DS.attr('\" + SF.sforceToEmberTypeMap[field.type] + \"', {updateable : \" + updateable + \"})\";\n\t\t\tconsole.log(sObjectReader.completeMetas.length + ' : field : ' + fn);\n\t\t};\n\n\t\tvar obj = sObjectReader.completeMetas[sObjectName];\n\t\tsObjectReader.shallowReadMetaFieldsAbr(obj, fieldVisitor);\n\t},\n\t// The thire stage of creating the ember model definitions. The model definition creation needs to be divided\n\t// into three phases due so that the relationships between objects can be properly defined.\n\t// I.e. first the inverses between relationships then the field definitions and then the relationship definitions\n\t// which need the field definitions.\n\t//\n\t// See createModelsForSObjects method for the typeFilter definition. If the typeFilter isn't used all the\n\t// salesforce object definitions are converted into ember models.\n\tcreateRelationshipModelForSObject: function createRelationshipModelForSObject(modelExtension, sObjectName, sObjectReader, cache, typeFilter) {\n\t\tvar relVisitor = function relVisitor(rel, object, path, reader) {\n\t\t\tif (typeof rel.relationshipName === 'undefined' || typeof rel.childSObject === 'undefined' || cache.isReferencedByMultitypedReference(rel)) return;\n\t\t\tif (typeFilter && !typeFilter(sObjectReader.completeMetas[rel.childSObject])) return;\n\t\t\tvar rn = rel.relationshipName;\n\t\t\tvar econ = SF.emberiseName(rel.childSObject);\n\t\t\tmodelExtension[rn] = \"this.DS.hasMany('\" + econ + \"', { async : true, inverse : '\" + rel.field + \"', })\";\n\t\t\tconsole.log('child rel : ' + rn);\n\t\t};\n\n\t\tvar obj = sObjectReader.completeMetas[sObjectName];\n\t\tsObjectReader.shallowReadMetaChildRelationshipsAbr(obj, relVisitor);\n\t},\n\t// This method creates a soql select statement string to query an object with its fields and relationships\n\t// using the salesforce soap api - i.e- sforce.connection.query\n\tcreateSoqlSelect: function createSoqlSelect(type, name, whereClause, childSelectCreator) {\n\t\tvar q = 'select Id';\n\t\ttype.eachAttribute(function (name, meta) {\n\t\t\tq += ', ' + name;\n\t\t});\n\t\ttype.eachRelationship(function (name, descriptor) {\n\t\t\tq += ', ';\n\t\t\tif (descriptor.kind === 'hasMany') q += '(' + childSelectCreator(descriptor.type, descriptor.key) + ')';else q += descriptor.key;\n\t\t});\n\t\tq += ' from ' + name;\n\t\tif (!(typeof whereClause === 'undefined')) q += ' where ' + whereClause;\n\t\treturn q;\n\t},\n\t// This method is part of creating a soql select statement. It handles the root select statement generation,\n\t// not the child relationship statement generation\n\tcreateRootSoqlSelect: function createRootSoqlSelect(type, name, whereClause) {\n\t\treturn SF.createSoqlSelect(type, name, whereClause, SF.createIdSoqlSelect);\n\t},\n\t// Child relationships are passed to ember as a list of ids in the payload. This method is for child\n\t// relationship select statement generation.\n\tcreateIdSoqlSelect: function createIdSoqlSelect(type, name, whereClause) {\n\t\tvar q = 'select Id from ' + name;\n\t\tif (!(typeof whereClause === 'undefined')) q += ' where ' + whereClause;\n\t\treturn q;\n\t},\n\t// In a soql select statement an array doesn't look like a serialised javascript array. This method\n\t// handles the conversion.\n\t//\n\t// [1,2,\"hello world\"] => (1,2,\"hello world\")\n\ttoSoqlArray: function toSoqlArray(array) {\n\t\tvar soqlAry = \"(\";\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tif (i > 0) soqlAry += \",'\";else soqlAry += \"'\";\n\t\t\tsoqlAry += array[i] + \"'\";\n\t\t}\n\t\tsoqlAry += \")\";\n\t\treturn soqlAry;\n\t},\n\t// Salesforce, naturally doesn't return it's results in the format that the ember rest adapter would like.\n\t// This method reformats a salesforce payload into an ember payload.\n\tformatPayload: function formatPayload(type, pl) {\n\t\tvar formattedPl = {};\n\t\tvar plural = this.Ember.Inflector.inflector.pluralize(type.modelName);\n\t\tplural = this.Ember.String.dasherize(plural);\n\t\tif (Array.isArray(pl.records)) {\n\t\t\tfor (var i = 0; i < pl.records.length; i++) SF.formatRecord(pl.records[i]);\n\t\t\tformattedPl[plural] = pl.records;\n\t\t} else if (pl.size === 0) {\n\t\t\tformattedPl[plural] = [];\n\t\t} else {\n\t\t\tSF.formatRecord(pl.records);\n\t\t\tformattedPl[plural] = [pl.records];\n\t\t}\n\t\treturn formattedPl;\n\t},\n\t// This is a sub method to formatPayload. It formats a single record result returned by salesforce\n\t// into a payload expected by the ember rest adapter.\n\tformatRecord: function formatRecord(rec) {\n\t\tif (!rec) {\n\t\t\tconsole.log('rec is undefined');\n\t\t\treturn;\n\t\t}\n\t\tfor (var fieldName in rec) {\n\t\t\tvar field = rec[fieldName];\n\t\t\tif (field != null && !(typeof field.records === 'undefined')) rec[fieldName] = SF.formatToIdArray(field.records);\n\t\t}\n\t\tif (!(typeof rec.Id === 'undefined')) {\n\t\t\trec.id = rec.Id;\n\t\t\tdelete rec.Id;\n\t\t}\n\t},\n\t// This is a sub method to formatRecord. It formats a child relationship result, returned within a record\n\t// result, into an id array expected by the ember rest adapter.\n\tformatToIdArray: function formatToIdArray(records) {\n\t\tvar idArr = [];\n\t\tif (Array.isArray(records)) for (var i = 0; i < records.length; i++) idArr.push(records[i].Id);else idArr.push(records.Id);\n\t\treturn idArr;\n\t},\n\t// This method formats an ember Snapshot object, into a javascript representation of an SObject, ready for\n\t// sending to the server using the salesforce soap api i.e. sforce.connection.create/update\n\tsfFormatSnapshot: function sfFormatSnapshot(snapshot, type) {\n\t\tvar _this = this;\n\n\t\tvar sfName = SF.sfriseName(type.modelName);\n\t\tvar so = new this.sforce.SObject(sfName);\n\t\tif (snapshot.id != null) so.Id = snapshot.id;\n\t\tsnapshot.eachAttribute(function (name, meta) {\n\t\t\tvar metaOptions = type.metaForProperty(name).options;\n\t\t\tif (metaOptions.updateable) so[name] = _this.serialisePrimitive(snapshot.attr(name));\n\t\t});\n\t\tsnapshot.eachRelationship(function (name, meta) {\n\t\t\tif (meta.kind === 'belongsTo') {\n\t\t\t\tvar metaOptions = type.metaForProperty(name).options;\n\t\t\t\tif (metaOptions.updateable) so[name] = snapshot.belongsTo(name, { id: true });\n\t\t\t}\n\t\t});\n\t\treturn so;\n\t},\n\tserialisePrimitive: function serialisePrimitive(primitive) {\n\t\tif (primitive instanceof Date) return primitive.toISOString();\n\t\treturn primitive;\n\t},\n\t// This is the general query method used to execute a soap api query to a salesforce org.\n\t// See: sforce.connection.query(q, cbSuccess, cbErr);\n\tquery: function query(store, type, _query, cbSuccess, cbErr) {\n\t\tvar q = null;\n\t\ttry {\n\t\t\tvar sfName = SF.sfriseName(type.modelName);\n\t\t\tq = SF.createRootSoqlSelect(type, sfName, _query);\n\t\t\tthis.sforce.connection.query(q, cbSuccess, cbErr);\n\t\t} catch (e) {\n\t\t\tconsole.log(q);\n\t\t\tthrow e;\n\t\t}\n\t},\n\t// This is an initialisation method to dynamically create the ember models, used by an ember app, by\n\t// reading the salesforce schema via the salesforce soap api. If this initialisation method is used,\n\t// app initialisation should happen in the callback: cb\n\t//\n\t// The objNames parameter is used to determine which salesforce types/objects you want to create\n\t// ember models for. If you omit this parameter, models will be created for all types/objects\n\tcreateEmberModels: function createEmberModels(opts) {\n\t\tvar connection = opts.connection,\n\t\t    cb = opts.cb,\n\t\t    objNames = opts.objNames;\n\t\tvar owner = opts.owner ? opts.owner : {};\n\n\t\tvar w = new _salesforceSchemaReader2['default'](connection, 100, function () {\n\t\t\tSF.createModelsForSObjects(owner, w.completeMetas, w, typeFilter);\n\t\t\tcb(owner);\n\t\t}, function () {\n\t\t\tcb(null, 'Failed to fetch salesforce schema definitions for the provided object names');\n\t\t}, objNames);\n\t}\n};\n\n// This is an initialisation method for creating the ember model definitions and downloading them in a\n// serialised js object. Once the static js object has been created it can be used to initialise\n// the models by using the createModelsFromExtensionMap method. If you use this method to initialise, your\n// app will start up faster and you won't need to initialise your app in a callback. Bear in mind that any\n// model changes on salesforce will mean that you'll have to regenerate the serialised js object into a file.\n//\n// See the createModelsForSObjects method for the objNames definition. If objNames isn't used\n//    // all the salesforce object definitions are converted into ember models.\n// downloadEmberModels(typeFilter){\n// \tthrow 'currently not implemented';\n// \tvar w = new SchemaReader(100, () => {\n// \t\tvar serialised = JSON.stringify(SF.createEmberModelDefinitions(w.completeMetas, w, typeFilter), null, 1);\n// \t\twindow.open('data:text/plain,' + encodeURIComponent('var modelDefinitions = ' + serialised + ';'));\n// \t});\n// },\nSFModels.factory = {\n\t// Produces a cache object used in creating the ember model definitions\n\tCache: function Cache() {\n\t\tthis.nonUpdateableFields = {};\n\t\tthis.multitypedReferenceFields = {};\n\t\tthis.inversFields = {};\n\t\tvar that = this;\n\n\t\tthis.logNonUpdateableField = function (objectName, fieldName) {\n\t\t\tthat.nonUpdateableFields[objectName.toLowerCase() + '.' + fieldName.toLowerCase()] = true;\n\t\t};\n\t\tthis.isUpdateableField = function (objectName, fieldName) {\n\t\t\treturn !that.nonUpdateableFields[objectName.toLowerCase() + '.' + fieldName.toLowerCase()];\n\t\t};\n\t\tthis.logMultitypedReferenceField = function (objectName, fieldName) {\n\t\t\tthat.multitypedReferenceFields[objectName.toLowerCase() + '.' + fieldName.toLowerCase()] = true;\n\t\t};\n\t\tthis.isMultitypedReferenceField = function (objectName, fieldName) {\n\t\t\treturn that.multitypedReferenceFields[objectName.toLowerCase() + '.' + fieldName.toLowerCase()];\n\t\t};\n\t\tthis.isReferencedByMultitypedReference = function (relationship) {\n\t\t\treturn that.isMultitypedReferenceField(relationship.childSObject, relationship.field);\n\t\t};\n\t\tthis.getInversMap = function (objectName) {\n\t\t\tvar map = that.inversFields[objectName];\n\t\t\tif (typeof map === 'undefined' || map == null) {\n\t\t\t\tmap = {};\n\t\t\t\tthat.inversFields[objectName] = map;\n\t\t\t}\n\t\t\treturn map;\n\t\t};\n\t\tthis.logInverses = function (objectName, field1Name, field2Name) {\n\t\t\tvar map = that.getInversMap(objectName);\n\t\t\tmap[field1Name] = field2Name;\n\t\t\tmap[field2Name] = field1Name;\n\t\t};\n\t\tthis.getInverse = function (objectName, fieldName) {\n\t\t\tvar inverse = that.getInversMap(objectName)[fieldName];\n\t\t\treturn typeof inverse === 'undefined' ? null : inverse;\n\t\t};\n\t}\n};\n\nexports['default'] = SFModels;\nmodule.exports = exports['default'];\n},{\"salesforce-schema-reader\":4}],3:[function(require,module,exports){\n// http://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n\tvalue: true\n});\nvar clone = function clone(obj) {\n\tif (null == obj || \"object\" != typeof obj) return obj;\n\tvar copy = obj.constructor();\n\tfor (var attr in obj) {\n\t\tif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n\t}\n\treturn copy;\n};\n\n// Requires a salesforce connection object, unless the metadata is passed directly\n// to the reader.\n// Leave onSuccess out if you don't want to populate metadata on construction\nvar SchemaReader = function SchemaReader(connection, batchSize, onSuccess, onFailure, objNames) {\n\tthis.type = 'SchemaReader';\n\tthis.connection = connection;\n\tthis.isFetching = true;\n\tthis.batchSize = typeof batchSize == 'undefined' ? 100 : batchSize;\n\tthis.skipErrors = typeof onFailure == 'undefined' ? true : false;\n\tthis.readRelWithUdefNames = false;\n\n\tif (typeof onSuccess === 'function') this.populate(onSuccess, onFailure, objNames);\n};\n\nSchemaReader.prototype = {\n\tpopulate: function populate(onSuccess, onFailure, objNames) {\n\t\tthis.isFetching = true;\n\t\tthis.preMetas = [];\n\t\tthis.completeMetas = {};\n\t\tthis.nameBatches = [];\n\n\t\tvar threadCount = 0;\n\t\tif (!objNames) {\n\t\t\tvar res = this.connection.describeGlobal();\n\t\t\tthis.preMetas = res.getArray(\"sobjects\");\n\t\t} else this.preMetas = objNames;\n\n\t\t// Push batches\n\t\tfor (var i = 0; i < this.preMetas.length;) {\n\t\t\tvar batch = [];\n\t\t\tfor (var j = 0; i < this.preMetas.length && j < this.batchSize; i++, j++) batch.push(this.preMetas[i].name);\n\t\t\tthis.nameBatches.push(batch);\n\t\t}\n\n\t\tvar failed = false;\n\t\tvar handledFailure = false;\n\t\tvar that = this;\n\t\tvar cb = function cb(err) {\n\t\t\tif (handledFailure) return;\n\t\t\tif (failed) {\n\t\t\t\tconsole.log(err);\n\t\t\t\tonFailure(err);\n\t\t\t\thandledFailure = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthreadCount--;\n\t\t\tconsole.log(threadCount);\n\t\t\tif (threadCount <= 0) {\n\t\t\t\tthat.isFetching = false;\n\t\t\t\tonSuccess();\n\t\t\t}\n\t\t};\n\t\tvar fail = function fail(err) {\n\t\t\tif (!that.skipErrors) {\n\t\t\t\tfailed = true;\n\t\t\t\tonFailure(err);\n\t\t\t} else console.log(err); // Currently only logging the error\n\t\t\tcb(err);\n\t\t};\n\n\t\t// Get complete metas\n\t\tfor (var i = 0; i < this.nameBatches.length; i++) {\n\t\t\tthreadCount++;\n\t\t\tconsole.log('Batch : ' + this.nameBatches[i]);\n\t\t\tthis.fetchCompleteMeta(this.nameBatches[i], cb, fail);\n\t\t}\n\t},\n\t// Read the array of pre metas and populate completeMetas\n\tfetchCompleteMeta: function fetchCompleteMeta(objs, success, fail) {\n\t\tvar that = this;\n\t\tvar fetchSuccess = function fetchSuccess(metas) {\n\t\t\ttry {\n\t\t\t\tfor (var i = 0; i < metas.length; i++) that.registerMeta(metas[i]);\n\t\t\t} catch (e) {\n\t\t\t\tfail(e);\n\t\t\t} finally {\n\t\t\t\tsuccess();\n\t\t\t} // call the callback\n\t\t};\n\t\tthis.connection.describeSObjects(objs, fetchSuccess, fail);\n\t},\n\tregisterMeta: function registerMeta(obj) {\n\t\tthis.completeMetas[obj.name] = obj;\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadFields: function shallowReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFields: function shallowReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.fields === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\t// subPath.push(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read beginning with the passed object\n\t// see deepread fields for the visitor definition\n\tshallowReadMetaFieldsAbr: function shallowReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaFields(obj, {}, [], visitor);\n\t},\n\t// visitor definition: function(field, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// field : {} - the field description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions and ending with a field description\n\t// reader : the reader which is currently used to read the schema\n\tdeepReadFields: function deepReadFields(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaFieldsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFields: function deepReadMetaFields(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.fields === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.fields.length; i++) {\n\t\t\tvar f = obj.fields[i];\n\t\t\tif (typeof f === 'undefined') continue;\n\t\t\tvar subPath = path.concat(f);\n\t\t\tif (visitor(f, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (f.type === 'reference') {\n\t\t\t\tif (!Array.isArray(f.referenceTo)) {\n\t\t\t\t\tif (this.deepReadMetaFields(this.completeMetas[f.referenceTo], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var j = 0; j < f.referenceTo.length; j++) if (this.deepReadMetaFields(this.completeMetas[f.referenceTo[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaFieldsAbr: function deepReadMetaFieldsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaFields(obj, [], [], visitor);\n\t},\n\t// visitor definition: function(rel, object, path, reader) {\n\t// \t\t// return 'term' // if you want to terminate the schema read\n\t// }\n\t// rel : {} - the relationship description under read,\n\t// object : {} - the sobject description under read\n\t// path : [] - a list of descriptions starting with the sobject description, trailed by\n\t//\t\t\t\trelationship descriptions\n\t// reader : the reader which is currently used to read the schema\n\tshallowReadChildRelationships: function shallowReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.shallowReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationships: function shallowReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (typeof obj.childRelationships === 'undefined') {\n\t\t\treturn;\n\t\t}\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to shallow read starting with the passed object\n\t// see shallowReadChildRelationships fields for the visitor definition\n\tshallowReadMetaChildRelationshipsAbr: function shallowReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.shallowReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\t// see shallowReadChildRelationships for the visitor definition\n\tdeepReadChildRelationships: function deepReadChildRelationships(visitor) {\n\t\tthis.validateState();\n\t\tfor (var objName in this.completeMetas) if (this.deepReadMetaChildRelationshipsAbr(this.completeMetas[objName], visitor) === 'term') return 'term';\n\t},\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationships: function deepReadMetaChildRelationships(obj, visited, path, visitor) {\n\t\tthis.validateState();\n\t\tif (visited[obj.name] == true) return;\n\t\tif (typeof obj.childRelationships === 'undefined') return;\n\t\tvisited[obj.name] = true;\n\n\t\tif (path.length == 0) path.push(obj);\n\n\t\tfor (var i = 0; i < obj.childRelationships.length; i++) {\n\t\t\tvar r = obj.childRelationships[i];\n\t\t\tif (typeof r === 'undefined') continue;\n\t\t\tvar subPath = path.concat(r);\n\t\t\tif (visitor(r, obj, subPath, this) === 'term') return 'term';\n\t\t\tif (!Array.isArray(r.childSObject)) {\n\t\t\t\tif (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t} else {\n\t\t\t\tfor (var j = 0; j < r.childSObject.length; j++) if (this.deepReadMetaChildRelationships(this.completeMetas[r.childSObject[j]], clone(visited), subPath, visitor) === 'term') return 'term';\n\t\t\t}\n\t\t}\n\t},\n\t// An abbreviation (Abr) method to deep read starting with the passed object\n\t// see deepread fields for the visitor definition\n\tdeepReadMetaChildRelationshipsAbr: function deepReadMetaChildRelationshipsAbr(obj, visitor) {\n\t\treturn this.deepReadMetaChildRelationships(obj, {}, [], visitor);\n\t},\n\n\tvalidateState: function validateState() {\n\t\tif (this.isFetching) throw this.type + \" hasn't finished fetching metadata from the server\";\n\t}\n\n};\n\n// filters\nSchemaReader.createFilterVisitor = function (filter, visitor) {\n\treturn function (field, object, path, reader) {\n\t\tif (filter(field, object, path, reader)) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newObjectNameFilter = function (objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldNameFilter = function (fieldName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif (!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) visitor(field, object, path, reader);\n\t};\n};\nSchemaReader.newFieldAndObjectNameFilter = function (fieldName, objName, visitor, caseSensitive) {\n\treturn function (field, object, path, reader) {\n\t\tif ((!caseSensitive && fieldName.toLowerCase() === field.name.toLowerCase() || caseSensitive && fieldName === field.name) && (!caseSensitive && objName.toLowerCase() === object.name.toLowerCase() || caseSensitive && objName === object.name)) visitor(field, object, path, reader);\n\t};\n};\n\n// miscalleneous\nSchemaReader.concatPath = function (path) {\n\tvar str = '';\n\tfor (var i = 0; i < path.length; i++) str += (i > 0 ? '.' : '') + (path[i].name ? path[i].name : path[i].relationshipName);\n\treturn str;\n};\n\nexports['default'] = SchemaReader;\nmodule.exports = exports['default'];\n},{}],4:[function(require,module,exports){\nmodule.exports = require('./dist/schema-reader-node.js');\n},{\"./dist/schema-reader-node.js\":3}]},{},[1]);\n"]}